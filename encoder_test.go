// Copyright 2021 dfuse Platform Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package eth

import (
	"math/big"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestEncoder_Write(t *testing.T) {
	type period struct {
		TokenID         *big.Int
		TokenType       Uint8
		FromBlockNumber Uint64
		ToBlockNumber   Uint64
	}

	tests := []struct {
		name        string
		typeName    string
		components  []*StructComponent
		in          interface{}
		expectError bool
		expectBytes []byte
	}{
		{
			name:     "bool",
			typeName: "bool",
			in:       true,
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
			},
		},
		{
			name:     "bool",
			typeName: "bool",
			in:       false,
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			name:     "uint8",
			typeName: "uint8",
			in:       uint8(7),
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
			},
		},
		{
			name:     "uint24",
			typeName: "uint24",
			in:       uint32(16777215),
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
			},
		},
		{
			name:     "uint56",
			typeName: "uint56",
			in:       uint64(72057594037927933),
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd,
			},
		},
		{
			name:     "uint64",
			typeName: "uint64",
			in:       uint64(673),
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xa1,
			},
		},
		{
			name:     "uint96",
			typeName: "uint96",
			in:       bigString(t, "79228162514264337593543950335"),
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			},
		},
		{
			name:     "uint112",
			typeName: "uint112",
			in:       bigString(t, "5192296858534827628530496329220095"),
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			},
		},
		{
			name:     "uint256",
			typeName: "uint256",
			in:       big.NewInt(2938),
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x7a,
			},
		},
		{
			name:     "bigger uint256",
			typeName: "uint256",
			in:       big.NewInt(2317850009133627),
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x08, 0x3c, 0x12, 0x82, 0x6f, 0xe2, 0x3b,
			},
		},
		{
			name:     "address",
			typeName: "address",
			in:       MustNewAddress("7d97ba95dac25316b9531152b3baa32327994da8"),
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x7d, 0x97, 0xba, 0x95,
				0xda, 0xc2, 0x53, 0x16, 0xb9, 0x53, 0x11, 0x52,
				0xb3, 0xba, 0xa3, 0x23, 0x27, 0x99, 0x4d, 0xa8,
			},
		},
		{

			name:        "method",
			typeName:    "method",
			in:          "transfer(address,uint256)",
			expectBytes: []byte{0xa9, 0x05, 0x9c, 0xbb},
		},
		{

			name:     "string",
			typeName: "string",
			in:       "UniswapV2: LOCKED",
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
				0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x56,
				0x32, 0x3a, 0x20, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
				0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			name:     "bytes",
			typeName: "bytes",
			in:       []byte{0x01, 0x03, 0xaa, 0xbb, 0xcc},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
				0x01, 0x03, 0xaa, 0xbb, 0xcc, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			name:     "bytes_empty",
			typeName: "bytes",
			in:       []byte{},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			name:     "bytes_flush",
			typeName: "bytes",
			in: []byte{
				0x01, 0x03, 0xaa, 0xbb, 0xcc, 0xfe, 0x45, 0xab,
				0x02, 0x03, 0xaa, 0xbb, 0xcc, 0xfe, 0x45, 0xcd,
				0x03, 0x03, 0xaa, 0xbb, 0xcc, 0xfe, 0x45, 0xef,
				0x04, 0x03, 0xaa, 0xbb, 0xcc, 0xfe, 0x45, 0xff,
			},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
				0x01, 0x03, 0xaa, 0xbb, 0xcc, 0xfe, 0x45, 0xab,
				0x02, 0x03, 0xaa, 0xbb, 0xcc, 0xfe, 0x45, 0xcd,
				0x03, 0x03, 0xaa, 0xbb, 0xcc, 0xfe, 0x45, 0xef,
				0x04, 0x03, 0xaa, 0xbb, 0xcc, 0xfe, 0x45, 0xff,
			},
		},
		{
			name:     "bytes_flush_plus_one",
			typeName: "bytes",
			in: []byte{
				0x01, 0x03, 0xaa, 0xbb, 0xcc, 0xfe, 0x45, 0xab,
				0x02, 0x03, 0xaa, 0xbb, 0xcc, 0xfe, 0x45, 0xcd,
				0x03, 0x03, 0xaa, 0xbb, 0xcc, 0xfe, 0x45, 0xef,
				0x04, 0x03, 0xaa, 0xbb, 0xcc, 0xfe, 0x45, 0xff,
				0x01,
			},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
				0x01, 0x03, 0xaa, 0xbb, 0xcc, 0xfe, 0x45, 0xab,
				0x02, 0x03, 0xaa, 0xbb, 0xcc, 0xfe, 0x45, 0xcd,
				0x03, 0x03, 0xaa, 0xbb, 0xcc, 0xfe, 0x45, 0xef,
				0x04, 0x03, 0xaa, 0xbb, 0xcc, 0xfe, 0x45, 0xff,
				0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			name:     "tuple from interface slice",
			typeName: "tuple",
			components: []*StructComponent{
				{Name: "tokenID", Type: "uint256"},
				{Name: "tokenType", Type: "uint256"},
				{Name: "fromBlockNumber", Type: "uint64"},
				{Name: "toBlockNumber", Type: "uint64"},
			},
			in: []interface{}{big.NewInt(1), big.NewInt(2), uint64(3), uint64(4)},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			},
		},
		{
			name:     "tuple from interface map",
			typeName: "tuple",
			components: []*StructComponent{
				{Name: "tokenID", Type: "uint256"},
				{Name: "tokenType", Type: "uint256"},
				{Name: "fromBlockNumber", Type: "uint64"},
				{Name: "toBlockNumber", Type: "uint64"},
			},
			in: map[string]interface{}{
				"tokenID":         big.NewInt(1),
				"tokenType":       big.NewInt(2),
				"fromBlockNumber": uint64(3),
				"toBlockNumber":   uint64(4),
			},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			},
		},
		{
			name:     "tuple from struct",
			typeName: "tuple",
			components: []*StructComponent{
				{Name: "tokenID", Type: "uint256"},
				{Name: "tokenType", Type: "uint8"},
				{Name: "fromBlockNumber", Type: "uint64"},
				{Name: "toBlockNumber", Type: "uint64"},
			},
			in: period{
				TokenID:         big.NewInt(1),
				TokenType:       Uint8(2),
				FromBlockNumber: Uint64(3),
				ToBlockNumber:   Uint64(4),
			},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			},
		},
		{
			name:     "tuple from struct ptr",
			typeName: "tuple",
			components: []*StructComponent{
				{Name: "tokenID", Type: "uint256"},
				{Name: "tokenType", Type: "uint8"},
				{Name: "fromBlockNumber", Type: "uint64"},
				{Name: "toBlockNumber", Type: "uint64"},
			},
			in: &period{
				TokenID:         big.NewInt(1),
				TokenType:       Uint8(2),
				FromBlockNumber: Uint64(3),
				ToBlockNumber:   Uint64(4),
			},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			e := NewEncoder()
			err := e.write(test.typeName, test.components, test.in)
			if test.expectError {
				require.Error(t, err)
			} else {
				require.NoError(t, err)
				assert.Equal(t, test.expectBytes, e.buffer)
			}
		})
	}
}

func TestEncoder_WriteArray(t *testing.T) {
	tests := []struct {
		name        string
		typeName    string
		components  []*StructComponent
		in          interface{}
		expectError bool
		expectBytes []byte
	}{
		{
			name:     "bool",
			typeName: "bool[]",
			in:       []bool{true, false, true},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
			},
		},
		{
			name:     "uint8",
			typeName: "uint8[]",
			in: []uint8{
				uint8(7),
				uint8(1),
				uint8(2),
			},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
			},
		},
		{
			name:     "uint24",
			typeName: "uint24[]",
			in:       []uint32{3, 7, 5},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
			},
		},
		{
			name:     "uint56",
			typeName: "uint56[]",
			in:       []uint64{72057594037927933, 72057594037927933, 72057594037927933},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd,
			},
		},
		{
			name:     "uint64",
			typeName: "uint64[]",
			in:       []uint64{673, 10, 9},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xa1,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,
			},
		},
		{
			name:     "uint96",
			typeName: "uint96[]",
			in: []*big.Int{
				bigString(t, "79228162514264337593543950335"),
				bigString(t, "3"),
			},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			},
		},
		{
			name:     "uint112",
			typeName: "uint112[]",
			in: []*big.Int{
				bigString(t, "5"),
				bigString(t, "3"),
			},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			},
		},
		{
			name:     "uint256",
			typeName: "uint256[]",
			in: []*big.Int{
				big.NewInt(2938),
			},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x7a,
			},
		},
		{
			name:     "address",
			typeName: "address[]",
			in: []Address{
				MustNewAddress("7d97ba95dac25316b9531152b3baa32327994da8"),
				MustNewAddress("c778417e063141139fce010982780140aa0cd5ab"),
			},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x7d, 0x97, 0xba, 0x95,
				0xda, 0xc2, 0x53, 0x16, 0xb9, 0x53, 0x11, 0x52,
				0xb3, 0xba, 0xa3, 0x23, 0x27, 0x99, 0x4d, 0xa8,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xc7, 0x78, 0x41, 0x7e,
				0x06, 0x31, 0x41, 0x13, 0x9f, 0xce, 0x01, 0x09,
				0x82, 0x78, 0x01, 0x40, 0xaa, 0x0c, 0xd5, 0xab,
			},
		},
		{

			name:     "string",
			typeName: "string[]",
			in:       []string{"UniswapV2: LOCKED", "hello world"},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
				0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x56,
				0x32, 0x3a, 0x20, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
				0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b,
				0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f,
				0x72, 0x6c, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			name:     "tuple",
			typeName: "tuple[]",
			components: []*StructComponent{
				{Type: "uint256"},
				{Type: "uint64"},
				{Type: "uint64"},
			},
			in: []interface{}{[]interface{}{big.NewInt(0x1AB), uint64(0x1CD), uint64(0x1EF)}},
			expectBytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xab,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xcd,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xef,
			},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			e := NewEncoder()
			err := e.write(test.typeName, test.components, test.in)
			if test.expectError {
				require.Error(t, err)
			} else {
				require.NoError(t, err)
				assert.Equal(t, test.expectBytes, e.buffer)
			}
		})

	}
}

func TestEncoder_WriteMethodCall(t *testing.T) {
	method := &MethodCall{
		MethodDef: &MethodDef{
			Name: "swapExactTokensForTokens",
			Parameters: []*MethodParameter{
				{TypeName: "uint256"},
				{TypeName: "uint256"},
				{TypeName: "address[]"},
				{TypeName: "address"},
				{TypeName: "uint256"},
			},
		},
		Data: []interface{}{
			big.NewInt(100000000000000),
			big.NewInt(2317850009133627),
			[]Address{
				MustNewAddress("d24af825e38495ee362466f214946cdf53aab8c8"), // JOHNY
				MustNewAddress("c778417e063141139fce010982780140aa0cd5ab"), // WETH
				MustNewAddress("7d97ba95dac25316b9531152b3baa32327994da8"), // STEPD
			},
			MustNewAddress("40c7f627ffb69b8d8752c518f8790b04a523bee5"),
			big.NewInt(1600958277),
		},
	}

	e := Encoder{}
	err := e.WriteMethodCall(method)
	require.NoError(t, err)
	assert.Equal(t, []byte{
		0x38, 0xed, 0x17, 0x39,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x5a, 0xf3, 0x10, 0x7a, 0x40, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x08, 0x3c, 0x12, 0x82, 0x6f, 0xe2, 0x3b,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x40, 0xc7, 0xf6, 0x27,
		0xff, 0xb6, 0x9b, 0x8d, 0x87, 0x52, 0xc5, 0x18,
		0xf8, 0x79, 0x0b, 0x04, 0xa5, 0x23, 0xbe, 0xe5,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x5f, 0x6c, 0xaf, 0x45,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xd2, 0x4a, 0xf8, 0x25,
		0xe3, 0x84, 0x95, 0xee, 0x36, 0x24, 0x66, 0xf2,
		0x14, 0x94, 0x6c, 0xdf, 0x53, 0xaa, 0xb8, 0xc8,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc7, 0x78, 0x41, 0x7e,
		0x06, 0x31, 0x41, 0x13, 0x9f, 0xce, 0x01, 0x09,
		0x82, 0x78, 0x01, 0x40, 0xaa, 0x0c, 0xd5, 0xab,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x7d, 0x97, 0xba, 0x95,
		0xda, 0xc2, 0x53, 0x16, 0xb9, 0x53, 0x11, 0x52,
		0xb3, 0xba, 0xa3, 0x23, 0x27, 0x99, 0x4d, 0xa8,
	}, e.buffer)
}

func TestEncoder_WriteTuple(t *testing.T) {
	method := &MethodCall{
		MethodDef: &MethodDef{
			Name: "getOnePeriod",
			Parameters: []*MethodParameter{
				{Name: "period", TypeName: "tuple", InternalType: "struct Period", TypeMutability: "", Components: []*StructComponent{
					{Name: "tokenID", Type: "uint256", InternalType: "uint256"},
					{Name: "fromBlockNum", Type: "uint64", InternalType: "uint64"},
					{Name: "toBlockNum", Type: "uint64", InternalType: "uint64"},
				}},
			},
		},
		Data: []interface{}{
			[]interface{}{
				big.NewInt(0xAB),
				uint64(0xBC),
				uint64(0x9F),
			},
		},
	}

	e := Encoder{}
	err := e.WriteMethodCall(method)
	require.NoError(t, err)
	assert.Equal(t, []byte{
		0x7d, 0x16, 0x50, 0x91,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xab,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbc,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9f,
	}, e.buffer)
}

func TestEncoder_WriteTupleArray(t *testing.T) {
	method := &MethodCall{
		MethodDef: &MethodDef{
			Name: "tupleArray",
			Parameters: []*MethodParameter{
				{Name: "periods", TypeName: "tuple[]", InternalType: "struct ClaimPeriod[]", TypeMutability: "", Components: []*StructComponent{
					{Name: "tokenID", Type: "uint256", InternalType: "uint256"},
					{Name: "fromBlockNum", Type: "uint64", InternalType: "uint64"},
					{Name: "toBlockNum", Type: "uint64", InternalType: "uint64"},
				}},
			},
		},
		Data: []interface{}{
			[]interface{}{
				[]interface{}{
					big.NewInt(0x1AB),
					uint64(0x1CD),
					uint64(0x1EF),
				},
			},
		},
	}

	e := Encoder{}
	err := e.WriteMethodCall(method)
	require.NoError(t, err)
	assert.Equal(t, []byte{
		0x15, 0xeb, 0x96, 0x3d,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xab,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xcd,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xef,
	}, e.buffer)
}

func TestEncoder_isArray(t *testing.T) {
	b, typeName := isArray("address[]")
	assert.Equal(t, true, b)
	assert.Equal(t, "address", typeName)

	b, typeName = isArray("address")
	assert.Equal(t, false, b)
	assert.Equal(t, "address", typeName)
}

func TestEncoder_override(t *testing.T) {
	tests := []struct {
		name        string
		buf         []byte
		offset      uint64
		data        []byte
		expectError bool
		expectBytes []byte
	}{
		{
			name:        "golden path",
			buf:         []byte{0xaa, 0x00, 0xbb},
			offset:      1,
			data:        []byte{0xcc},
			expectError: false,
			expectBytes: []byte{0xaa, 0xcc, 0xbb},
		},
		{
			name:        "overlaps with non-zero data",
			buf:         []byte{0xaa, 0x00, 0xbb},
			offset:      1,
			data:        []byte{0xcc, 0xdd},
			expectError: false,
			expectBytes: []byte{0xaa, 0xcc, 0xdd},
		},
		{
			name:        "insufficient room in buffer",
			buf:         []byte{0xaa, 0x00, 0xbb},
			offset:      1,
			data:        []byte{0xcc, 0xdd, 0xee},
			expectError: true,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			e := &Encoder{buffer: test.buf}
			err := e.override(test.offset, test.data)
			if test.expectError {
				require.Error(t, err)
			} else {
				require.NoError(t, err)
				assert.Equal(t, test.expectBytes, e.buffer)
			}
		})
	}
}
